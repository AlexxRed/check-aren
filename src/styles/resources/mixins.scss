/* ---- Mixins ---- */
@use 'sass:math';

/* -- Transition -- */
@mixin transition($delay: $transition-delay) {
  transition: $transition-property $delay $transition-timing;
}

/* -- Link Hover -- */
@mixin link-hover($opacity: $link-hover-opacity) {
  opacity: $opacity;
  @include transition();
  color: $hover;
}

/* -- Fade -- */
@mixin fade($status) {
  @if $status == in {
    opacity: 1;
    pointer-events: visible;
  }

  @if $status == out {
    opacity: 0;
    pointer-events: none;
  }

  @include transition();
}

/* -- Background -- */
@mixin background($url) {
  background: url($url) no-repeat center top / cover;
}

/* -- Background Opacity -- */
@mixin background-opacity($color, $opacity) {
  background: $color;
  background: rgba($color, $opacity);
}

/* -- Selection -- */
@mixin selection {
  @include background-opacity(var(--background-color-gray-black-theme), 0.7);
  color: $white;
  text-shadow: none;
}

/* -- Flexible -- */
@mixin flexible {
  display: flex;
  align-items: center;
}

/* -- Full Stretch -- */
@mixin full-stretch {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

/* -- Center Element -- */
@mixin center-element {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/* -- Center All Content -- */
@mixin center-all-content {
  @include full-stretch();
  @include flexible();
  justify-content: center;
  text-align: center;
}

/* -- Reset Indents -- */
@mixin reset-indents {
  margin: 0;
  padding: 0;
}

/* -- Media Queries -- */
@mixin mq($size: '480', $type: '<', $size-next: null) {
  @if ($type == '>') {
    @media (min-width: #{$size}px) {
      @content;
    }
  }

  @if ($type == '<') {
    @media (max-width: #{$size}px) {
      @content;
    }
  }

  @if ($type == '<>') {
    @media screen and (min-width: #{$size}px) and (max-width: #{$size-next}px) {
      @content;
    }
  }
}

@mixin font($font-name, $file-name, $weight, $style) {
  @font-face {
    font-family: $font-name;
    font-display: swap;
    src: url('../fonts/#{$file-name}.woff2') format('woff2'),
      url('../fonts/#{$file-name}.woff') format('woff');
    font-weight: #{$weight};
    font-style: #{$style};
  }
}

/* -- Create Gutter -- */
@mixin create-gutter($screen-width, $gutter: '') {
  @if ($screen-width == 'default') {
    width: $container-default-width;
    margin: 0 auto;
  } @else {
    @include mq($screen-width) {
      $percent-gutter: percent($gutter, $screen-width);
      padding-left: $percent-gutter;
      padding-right: $percent-gutter;
      width: 100%;
      margin: 0;
    }
  }
}

/* -- Responsive Container -- */
@mixin responsive-container() {
  @include create-gutter('default');
  @include create-gutter($desktop, $container-desktop-gutter);
  @include create-gutter($tablet, $container-laptop-gutter);
  @include create-gutter($phone, $container-phone-gutter);
  // @include create-gutter(1300, $container-desktop-gutter - 45);
  // @include create-gutter($tablet, $container-laptop-gutter);
  // @include create-gutter(1100, $container-laptop-gutter - 25);
}

/* -- Menu Top Calculate -- */
@mixin menu-top-calc() {
  top: calc(
    $header-padding-desktop-gutter + 52px + $header-padding-desktop-gutter
  );

  @include mq($tablet) {
    top: calc(
      $header-padding-tablet-gutter + 52px + $header-padding-tablet-gutter
    );
  }

  @include mq($phone) {
    top: calc(
      $header-padding-phablet-gutter + 52px + $header-padding-phablet-gutter
    );
  }
}

@mixin container(
  $max-width: $container-max-width,
  $padding: $container-padding
) {
  margin: 0 auto;
  padding-left: $padding;
  padding-right: $padding;
  max-width: $max-width;
  width: 100%;
}

// .container {
// 	@include container();

// 		@media screen and (max-width: $phone) {
// 		@include container(100%, 24px);
// 		}

// 		@media screen and (min-width: ($phone + 1)) and (max-width: $tablet) {
// 		@include container(100%, 32px);
// 		}

// 		@media screen and (min-width: ($tablet + 1)) and (max-width: $desktop) {
// 		@include container(90%, 30px);
// 		}

// 		@media screen and (min-width: ($desktop + 1)) {
// 		@include container($container-max-width, $container-padding);
// 		}
// }

@mixin adaptiv-font($pcSize, $mobSize) {
  $addSize: $pcSize - $mobSize;
  $maxWidth: $maxWidth - 320;
  font-size: calc(
    #{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth})
  );
}
